'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _events = require('events');

var _graphql = require('graphql');

var _values = require('graphql/execution/values');

var _validation = require('./validation');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SubscriptionManager = function () {
	function SubscriptionManager(options) {
		_classCallCheck(this, SubscriptionManager);

		this.pubsub = options.pubsub;
		this.schema = options.schema;
		this.setupFunctions = options.setupFunctions || {};
		this.subscriptions = {};
		this.maxSubscriptionId = 0;
	}

	SubscriptionManager.prototype.publish = function publish(triggerName, payload) {
		this.pubsub.publish(triggerName, payload);
	};

	SubscriptionManager.prototype.subscribe = function subscribe(options) {

		// 1. validate the query, operationName and variables
		var parsedQuery = (0, _graphql.parse)(options.query);
		var errors = (0, _graphql.validate)(this.schema, parsedQuery, [..._graphql.specifiedRules, _validation.subscriptionHasSingleRootField]);

		// TODO: validate that all variables have been passed (and are of correct type)?
		if (errors.length) {
			// this error kills the subscription, so we throw it.
			return Promise.reject < number > new ValidationError(errors);
		}

		var args = {};

		// operationName is the name of the only root field in the subscription document
		var subscriptionName = '';
		parsedQuery.definitions.forEach(definition => {
			if (definition.kind === 'OperationDefinition') {
				// only one root field is allowed on subscription. No fragments for now.
				var rootField = definition.selectionSet.selections[0];
				subscriptionName = rootField.name.value;

				var fields = this.schema.getSubscriptionType().getFields();
				args = (0, _values.getArgumentValues)(fields[subscriptionName], rootField, options.variables);
			}
		});

		var triggerMap = void 0;

		if (this.setupFunctions[subscriptionName]) {
			triggerMap = this.setupFunctions[subscriptionName](options, args, subscriptionName);
		} else {
			// if not provided, the triggerName will be the subscriptionName, The trigger will not have any
			// options and rely on defaults that are set later.
			triggerMap = { [subscriptionName]: {} };
		}

		var externalSubscriptionId = this.maxSubscriptionId++;
		this.subscriptions[externalSubscriptionId] = [];
		var subscriptionPromises = [];
		Object.keys(triggerMap).forEach(triggerName => {
			// Deconstruct the trigger options and set any defaults
			var _triggerMap$triggerNa = triggerMap[triggerName],
			    _triggerMap$triggerNa2 = _triggerMap$triggerNa.channelOptions,
			    channelOptions = _triggerMap$triggerNa2 === undefined ? {} : _triggerMap$triggerNa2,
			    _triggerMap$triggerNa3 = _triggerMap$triggerNa.filter,
			    filter = _triggerMap$triggerNa3 === undefined ? () => true : _triggerMap$triggerNa3;

			// 2. generate the handler function
			//
			// rootValue is the payload sent by the event emitter / trigger by
			// convention this is the value returned from the mutation
			// resolver

			var onMessage = rootValue => {
				return Promise.resolve().then(() => {
					if (typeof options.context === 'function') {
						return options.context();
					}
					return options.context;
				}).then(context => {
					return Promise.all([context, filter(rootValue, context)]);
				}).then(([context, doExecute]) => {
					if (!doExecute) {
						return;
					}
					(0, _graphql.execute)(this.schema, parsedQuery, rootValue, context, options.variables, options.operationName).then(data => {
						return options.callback(data.errors, data);
					});
				}).catch(error => {
					options.callback(error);
				});
			};

			// 3. subscribe and keep the subscription id
			subscriptionPromises.push(this.pubsub.subscribe(triggerName, onMessage, channelOptions).then(id => this.subscriptions[externalSubscriptionId].push(id)));
		});

		// Resolve the promise with external sub id only after all subscriptions completed
		return Promise.all(subscriptionPromises).then(() => externalSubscriptionId);
	};

	SubscriptionManager.prototype.unsubscribe = function unsubscribe(subId) {
		// pass the subId right through to pubsub. Do nothing else.
		this.subscriptions[subId].forEach(internalId => {
			this.pubsub.unsubscribe(internalId);
		});
		delete this.subscriptions[subId];
	};

	return SubscriptionManager;
}();

;

exports.default = SubscriptionManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,