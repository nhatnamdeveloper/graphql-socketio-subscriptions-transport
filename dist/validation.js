import { ValidationContext, Selection, GraphQLError } from 'graphql';

// XXX I don't know how else to do this. Can't seem to import from GraphQL.
const FIELD = 'Field';

export function tooManySubscriptionFieldsError(subscriptionName) {
  return `Subscription "${subscriptionName}" must have only one field.`;
}

// XXX we temporarily use this validation rule to make our life a bit easier.

export function subscriptionHasSingleRootField(context) {
  const schema = context.getSchema();
  schema.getSubscriptionType();
  return {
    OperationDefinition(node) {
      const operationName = node.name ? node.name.value : '';
      let numFields = 0;
      node.selectionSet.selections.forEach(selection => {
        if (selection.kind === FIELD) {
          numFields++;
        } else {
          // why the heck use a fragment on the Subscription type? Just ... don't
          context.reportError(new GraphQLError('Apollo subscriptions do not support fragments on the root field', [node]));
        }
      });
      if (numFields > 1) {
        context.reportError(new GraphQLError(tooManySubscriptionFieldsError(operationName), [node]));
      }
      return false;
    }
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy92YWxpZGF0aW9uLmpzIl0sIm5hbWVzIjpbIlZhbGlkYXRpb25Db250ZXh0IiwiU2VsZWN0aW9uIiwiR3JhcGhRTEVycm9yIiwiRklFTEQiLCJ0b29NYW55U3Vic2NyaXB0aW9uRmllbGRzRXJyb3IiLCJzdWJzY3JpcHRpb25OYW1lIiwic3Vic2NyaXB0aW9uSGFzU2luZ2xlUm9vdEZpZWxkIiwiY29udGV4dCIsInNjaGVtYSIsImdldFNjaGVtYSIsImdldFN1YnNjcmlwdGlvblR5cGUiLCJPcGVyYXRpb25EZWZpbml0aW9uIiwibm9kZSIsIm9wZXJhdGlvbk5hbWUiLCJuYW1lIiwidmFsdWUiLCJudW1GaWVsZHMiLCJzZWxlY3Rpb25TZXQiLCJzZWxlY3Rpb25zIiwiZm9yRWFjaCIsInNlbGVjdGlvbiIsImtpbmQiLCJyZXBvcnRFcnJvciJdLCJtYXBwaW5ncyI6IkFBQUEsU0FDRUEsaUJBREYsRUFFRUMsU0FGRixFQUdFQyxZQUhGLFFBSU8sU0FKUDs7QUFNQTtBQUNBLE1BQU1DLFFBQVEsT0FBZDs7QUFHQSxPQUFPLFNBQVNDLDhCQUFULENBQXdDQyxnQkFBeEMsRUFBeUQ7QUFDOUQsU0FBUSxpQkFBZ0JBLGdCQUFpQiw2QkFBekM7QUFDRDs7QUFFRDs7QUFFQSxPQUFPLFNBQVNDLDhCQUFULENBQXdDQyxPQUF4QyxFQUFpRDtBQUN0RCxRQUFNQyxTQUFTRCxRQUFRRSxTQUFSLEVBQWY7QUFDQUQsU0FBT0UsbUJBQVA7QUFDQSxTQUFPO0FBQ0xDLHdCQUFvQkMsSUFBcEIsRUFBMEI7QUFDeEIsWUFBTUMsZ0JBQWdCRCxLQUFLRSxJQUFMLEdBQVlGLEtBQUtFLElBQUwsQ0FBVUMsS0FBdEIsR0FBOEIsRUFBcEQ7QUFDQSxVQUFJQyxZQUFZLENBQWhCO0FBQ0FKLFdBQUtLLFlBQUwsQ0FBa0JDLFVBQWxCLENBQTZCQyxPQUE3QixDQUF1Q0MsU0FBRCxJQUFlO0FBQ25ELFlBQUlBLFVBQVVDLElBQVYsS0FBbUJsQixLQUF2QixFQUE4QjtBQUM1QmE7QUFDRCxTQUZELE1BRU87QUFDTDtBQUNBVCxrQkFBUWUsV0FBUixDQUFvQixJQUFJcEIsWUFBSixDQUFpQixpRUFBakIsRUFBb0YsQ0FBQ1UsSUFBRCxDQUFwRixDQUFwQjtBQUNEO0FBQ0YsT0FQRDtBQVFBLFVBQUlJLFlBQVksQ0FBaEIsRUFBbUI7QUFDakJULGdCQUFRZSxXQUFSLENBQW9CLElBQUlwQixZQUFKLENBQWlCRSwrQkFBK0JTLGFBQS9CLENBQWpCLEVBQWdFLENBQUNELElBQUQsQ0FBaEUsQ0FBcEI7QUFDRDtBQUNELGFBQU8sS0FBUDtBQUNEO0FBaEJJLEdBQVA7QUFrQkQiLCJmaWxlIjoidmFsaWRhdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIFZhbGlkYXRpb25Db250ZXh0LFxuICBTZWxlY3Rpb24sXG4gIEdyYXBoUUxFcnJvcixcbn0gZnJvbSAnZ3JhcGhxbCc7XG5cbi8vIFhYWCBJIGRvbid0IGtub3cgaG93IGVsc2UgdG8gZG8gdGhpcy4gQ2FuJ3Qgc2VlbSB0byBpbXBvcnQgZnJvbSBHcmFwaFFMLlxuY29uc3QgRklFTEQgPSAnRmllbGQnO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiB0b29NYW55U3Vic2NyaXB0aW9uRmllbGRzRXJyb3Ioc3Vic2NyaXB0aW9uTmFtZSl7XG4gIHJldHVybiBgU3Vic2NyaXB0aW9uIFwiJHtzdWJzY3JpcHRpb25OYW1lfVwiIG11c3QgaGF2ZSBvbmx5IG9uZSBmaWVsZC5gO1xufVxuXG4vLyBYWFggd2UgdGVtcG9yYXJpbHkgdXNlIHRoaXMgdmFsaWRhdGlvbiBydWxlIHRvIG1ha2Ugb3VyIGxpZmUgYSBiaXQgZWFzaWVyLlxuXG5leHBvcnQgZnVuY3Rpb24gc3Vic2NyaXB0aW9uSGFzU2luZ2xlUm9vdEZpZWxkKGNvbnRleHQpIHtcbiAgY29uc3Qgc2NoZW1hID0gY29udGV4dC5nZXRTY2hlbWEoKTtcbiAgc2NoZW1hLmdldFN1YnNjcmlwdGlvblR5cGUoKTtcbiAgcmV0dXJuIHtcbiAgICBPcGVyYXRpb25EZWZpbml0aW9uKG5vZGUpIHtcbiAgICAgIGNvbnN0IG9wZXJhdGlvbk5hbWUgPSBub2RlLm5hbWUgPyBub2RlLm5hbWUudmFsdWUgOiAnJztcbiAgICAgIGxldCBudW1GaWVsZHMgPSAwO1xuICAgICAgbm9kZS5zZWxlY3Rpb25TZXQuc2VsZWN0aW9ucy5mb3JFYWNoKCAoc2VsZWN0aW9uKSA9PiB7XG4gICAgICAgIGlmIChzZWxlY3Rpb24ua2luZCA9PT0gRklFTEQpIHtcbiAgICAgICAgICBudW1GaWVsZHMrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB3aHkgdGhlIGhlY2sgdXNlIGEgZnJhZ21lbnQgb24gdGhlIFN1YnNjcmlwdGlvbiB0eXBlPyBKdXN0IC4uLiBkb24ndFxuICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcignQXBvbGxvIHN1YnNjcmlwdGlvbnMgZG8gbm90IHN1cHBvcnQgZnJhZ21lbnRzIG9uIHRoZSByb290IGZpZWxkJywgW25vZGVdKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKG51bUZpZWxkcyA+IDEpIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKHRvb01hbnlTdWJzY3JpcHRpb25GaWVsZHNFcnJvcihvcGVyYXRpb25OYW1lKSwgW25vZGVdKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgfTtcbn07XG4iXX0=