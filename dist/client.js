'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _definitions = require('./definitions');

var _messageTypes = require('./messageTypes');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Client = function () {
	function Client(ref) {
		_classCallCheck(this, Client);

		this.ws = ref;
		this.subscriptions = {};
		this.maxId = 0;
		this.reconnectSubscriptions = {};
		this.unsentMessagesQueue = [];
		this.reconnecting = false;

		this.ws.on(_definitions.EVENT_KEY, this.handleMessage.bind(this));

		this.ws.on('connect', () => {
			this.sendUnsentMessages();
		});

		this.ws.on('reconnect_attempt', () => {
			if (!this.reconnecting) {
				this.reconnectSubscriptions = this.subscriptions;
				this.subscriptions = {};
				this.reconnecting = true;
			}
		});

		this.ws.on('reconnect', () => {
			this.reconnecting = false;

			Object.keys(this.reconnectSubscriptions).forEach(key => {
				var _reconnectSubscriptio = this.reconnectSubscriptions[key],
				    options = _reconnectSubscriptio.options,
				    handler = _reconnectSubscriptio.handler;


				this.subscribe(options, handler);
			});

			this.sendUnsentMessages();
		});
	}

	Client.prototype.handleMessage = function handleMessage({ id: id, type: type, payload: payload }) {
		switch (type) {
			case _messageTypes.SUBSCRIPTION_SUCCESS:
				this.subscriptions[id].pending = false;

				break;
			case _messageTypes.SUBSCRIPTION_FAIL:
				this.subscriptions[id].handler(this.formatErrors(payload.errors), null);
				delete this.subscriptions[id];

				break;
			case _messageTypes.SUBSCRIPTION_DATA:
				if (payload.data && !payload.errors) {
					this.subscriptions[id].handler(null, payload.data);
				} else {
					this.subscriptions[id].handler(this.formatErrors(payload.errors), null);
				}

				break;
			default:
				throw new Error('Invalid message type - must be of type `subscription_start` or `subscription_data`.');
		}
	};

	Client.prototype.formatErrors = function formatErrors(errors) {
		if (Array.isArray(errors)) {
			return errors;
		}
		if (errors && errors.message) {
			return [errors];
		}

		return [{ message: 'Unknown error' }];
	};

	Client.prototype.generateSubscriptionId = function generateSubscriptionId() {
		var id = this.maxId;
		this.maxId += 1;
		return id;
	};

	Client.prototype.sendUnsentMessages = function sendUnsentMessages() {
		this.unsentMessagesQueue.forEach(message => this.ws.emit(_definitions.EVENT_KEY, message));

		this.unsentMessagesQueue = [];
	};

	Client.prototype.sendMessage = function sendMessage(message) {
		switch (this.ws.io.readyState) {
			case 'opening':
				this.unsentMessagesQueue.push(message);

				break;
			case 'open':
				this.ws.emit(_definitions.EVENT_KEY, message);

				break;
			default:
				if (this.reconnecting) {
					this.unsentMessagesQueue.push(message);
				} else {
					throw new Error('Client is not connected to a websocket.');
				}

				break;
		}
	};

	Client.prototype.subscribe = function subscribe(options, handler) {
		var query = options.query,
		    variables = options.variables,
		    operationName = options.operationName,
		    context = options.context;


		if (!query) {
			throw new Error('Must provide `query` to subscribe.');
		}

		if (!handler) {
			throw new Error('Must provide `handler` to subscribe.');
		}

		if (typeof query !== 'string' || operationName && typeof operationName !== 'string' || variables && !(variables instanceof Object)) {
			throw new Error('Incorrect option types to subscribe. `subscription` must be a string,' + '`operationName` must be a string, and `variables` must be an object.');
		}

		var subId = this.generateSubscriptionId();

		var message = Object.assign(options, {
			type: _messageTypes.SUBSCRIPTION_START,
			id: subId
		});

		this.sendMessage(message);
		this.subscriptions[subId] = { options: options, handler: handler, pending: true };

		return subId;
	};

	Client.prototype.unsubscribe = function unsubscribe(id) {
		delete this.subscriptions[id];

		this.sendMessage({ id: id, type: _messageTypes.SUBSCRIPTION_END });
	};

	Client.prototype.unsubscribeAll = function unsubscribeAll() {
		Object.keys(this.subscriptions).forEach(subId => this.unsubscribe(parseInt(subId)));
	};

	return Client;
}();

exports.default = Client;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,